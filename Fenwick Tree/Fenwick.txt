const int N = 2e5 + 5;

#define delta(i) ((i) & -(i));

const int maxn = N;

struct fenwick {

  int A[maxn];

  void update(int i , int k) {

    i++;
    if (i < 1) return;

    while (i < maxn)
      A[i] += k , i += delta(i);

  }

  int query(int i) {

    int res = 0;
    i++;
    while (i > 0)
      res += A[i] , i -= delta(i);

    return res;
  }

} fen;


// Counting Inversions using fenwick tree

// just create the inversion array and apply the technique

// reference Second thread yt channel education round 96

  reps(i , n - 1 , 0) {

    lld c = *(sett[t[i] - 'a'].begin());

    sett[t[i] - 'a'].erase(c);

    // cout << c << "  " << fen.query(c) << " iam c\n";

    ans += fen.query(c);

    fen.update(c , 1);

  }
